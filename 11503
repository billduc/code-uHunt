#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second
#define pb push_back
#define mp make_pair
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),(a).end()
#define DEBUG(x) {cout<< #x <<" = " << x <<endl;}

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;

map<string, int> mymap;
vector<pair<string,string> > listFriend;
vector<int> pset;

int findSet(int i){
    return ((pset[i] == i) ? i : (pset[i] = findSet(pset[i])));
}

bool sameSet(int i, int j){
    return findSet(i) == findSet(j);
}

void unionSet(int i, int j){
    pset[findSet(i)] = findSet(j);
}

int main(){
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    //ios::sync_with_stdio(false);
    int test;
    cin >> test;
    while (test--){
        int n;
        cin >> n;
        int id = 1;

        pset.assign(100111 , 0);
        for(int i=1; i< 100111 ; ++i)
            pset[i] = i;
        vector<int> res;
        res.assign(100111, 1);

        for(int i = 0;i < n; ++i){
            char s1[30], s2[30];
            scanf("%s %s",&s1,&s2);
            string st1 = string(s1);
            string st2 = string(s2);
            //cout << st1 << " "<< st2 <<endl;
            if (!mymap.count(st1))
            {
                mymap[st1] = id;
                id++;
            }
            if (!mymap.count(st2)){
                mymap[st2] = id;
                id++;
            }
            //cout<<st1<<" - "<<st2;
            int i1 = findSet(mymap[st1]);
            int i2 = findSet(mymap[st2]);
            if (sameSet(i1,i2))
                cout<< res[i1] <<endl;
            else{
                int tg = res[i1] + res[i2];
                res[i1] = tg;
                res[i2] = tg;
                unionSet(i1,i2);
                cout << tg << endl;
            }
        }
//        for(map<string,int> :: iterator it =  mymap.begin(); it != mymap.end(); ++it)
//            cout<<it->X<<" "<<it->Y<<endl;
        mymap.clear();
        listFriend.clear();
        pset.clear();
    }
    return 0;
}
